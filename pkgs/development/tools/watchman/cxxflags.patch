commit ca060485a88bf8f16782f793d95f12b655fc0052
Author: Matthew Glazar <strager.nds@gmail.com>
Date:   Sun Mar 10 12:22:06 2019 -0700

    Don't clobber CXXFLAGS/CMAKE_CXX_FLAGS

    CMake allows the user to add additional compilation options using
    CXXFLAGS= or -DCMAKE_CXX_FLAGS=. For example, each of the following
    commands would enable GCC security features in generated code:

        $ CXXFLAGS=-fstack-protector-strong cmake .
        $ cmake -DCMAKE_CXX_FLAGS=-fstack-protector-strong .

    Unfortunately, this doesn't work with Watchman's build system; CXXFLAGS
    and CMAKE_CXX_FLAGS are ignored. This makes it harder for package
    managers to tweak Watchman's compilation.

    Teach Watchman to respect user-supplied compiler flags instead of
    overriding them.

diff --git a/CMakeLists.txt b/CMakeLists.txt
index f1e7cfd7..fb282818 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -318,7 +318,7 @@ if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
   endif()
   add_definitions(-D_CRT_SECURE_NO_WARNINGS=1)
   include_directories(${CMAKE_CURRENT_SOURCE_DIR}/winbuild)
-  set(CMAKE_CXX_FLAGS "/Zi /Zo /MP /MT /Oi /EHsc /GL-")
+  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /Zi /Zo /MP /MT /Oi /EHsc /GL-")
   set(CMAKE_SHARED_LINKER_FLAGS
     "${CMAKE_SHARED_LINKER_FLAGS} /DEBUG /MT /OPT:NOREF")
   set(CMAKE_EXE_LINKER_FLAGS
@@ -329,7 +329,7 @@ if(CMAKE_SYSTEM_NAME STREQUAL "Windows")
     "${CMAKE_STATIC_LIBRARY_FLAGS} /DEBUG /MT /OPT:NOREF")
 else()
   set(CMAKE_CXX_FLAGS_COMMON "-g -Wall -Wextra -std=gnu++14")
-  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS_COMMON}")  # for cmake 3.0
+  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_COMMON}")  # for cmake 3.0
   set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_COMMON}")
   set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_COMMON} -O3")
 endif()
